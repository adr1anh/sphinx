name: Tests

on:
  push:
    branches: [main, dev]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    name: CI Test Suite
    runs-on: warp-ubuntu-latest-x64-32x
    steps:
      - uses: actions/checkout@v4
        with:
          repository: lurk-lab/ci-workflows
      - uses: ./.github/actions/ci-env
      - uses: actions/checkout@v4
      - name: Setup CI
        uses: ./.github/actions/setup
        with:
          pull_token: ${{ secrets.REPO_TOKEN }}
      - name: Run cargo test on wp1 except the prove_sp1 recursion test
        run: |
          cargo nextest run --cargo-profile dev-ci --profile ci --workspace --exclude wp1-recursion-circuit -E 'all() - test(test_prove_sp1)'
      - name: Run cargo test with no default features
        run: |
          cargo nextest run -p wp1-core --cargo-profile dev-ci --profile ci --no-default-features --features debug -- cpu::trace::tests::generate_trace
        working-directory: ${{ github.workspace }}/examples
      - name: Install `cargo prove` CLI
        run: |
          cargo install --locked --path ./cli
          cargo prove install-toolchain
        working-directory: ${{ github.workspace }}
      - name: Run fibonacci-io example
        run: |
          cargo run --release --manifest-path examples/fibonacci-io/script/Cargo.toml

  test-recursion-circuit:
    name: Test recursion circuit
    runs-on: warp-ubuntu-latest-x64-32x
    steps:
      - uses: actions/checkout@v4
        with:
          repository: lurk-lab/ci-workflows
      - uses: ./.github/actions/ci-env
      - uses: actions/checkout@v4
      - name: Setup CI
        uses: ./.github/actions/setup
        with:
          pull_token: ${{ secrets.PRIVATE_PULL_TOEKN }}
      - name: Run cargo test on the recursion circuit
        run: |
          cargo nextest run --cargo-profile dev-ci --profile ci -p wp1-recursion-circuit

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: lurk-lab/ci-workflows
      - uses: ./.github/actions/ci-env
      - uses: actions/checkout@v4
      - name: Setup CI
        uses: ./.github/actions/setup
        with:
          pull_token: ${{ secrets.REPO_TOKEN }}
      - name: Check Rustfmt Code Style
        run: cargo fmt --all --check
      - name: check *everything* compiles
        run: cargo check --all-targets --all-features --all --examples --tests --benches
      # See '.cargo/config' for list of enabled/disabled clippy lints
      - name: Check clippy warnings
        run: cargo xclippy -D warnings
      - name: Doctests
        run: cargo test --doc --workspace
      - name: Cargo-deny
        uses: EmbarkStudios/cargo-deny-action@v1

  integration-tests-examples:
    name: Build integration tests and examples
    runs-on: warp-ubuntu-latest-x64-32x
    steps:
      - uses: actions/checkout@v4
        with:
          repository: lurk-lab/ci-workflows
      - uses: ./.github/actions/ci-env
      - uses: actions/checkout@v4
      - name: Setup CI
        uses: ./.github/actions/setup
        with:
          pull_token: ${{ secrets.REPO_TOKEN }}
          perf: false
      - name: Install `cargo prove` CLI
        run: |
          cargo install --locked --path ./cli
          cargo prove install-toolchain
        working-directory: ${{ github.workspace }}
      - name: Check examples
        run: |
          for i in $(find ./ -maxdepth 1 -mindepth 1 -type d); do
            cd "$i/script"
            cargo check
            cd ../../
          done
        working-directory: ${{ github.workspace }}/examples
      - name: Check integration tests
        run: |
          for i in $(find ./ -maxdepth 1 -mindepth 1 -type d); do
            cd "$i"
            cargo check
            cd ../
          done
        working-directory: ${{ github.workspace }}/tests
      - name: Run cargo prove new
        run: |
          cargo prove new cargo-prove-test
          cd cargo-prove-test
          cd script
          cargo run --release


  mac-m1:
    name: CI Tests on OSX ARM
    runs-on: macos-latest-xlarge
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          repository: lurk-lab/ci-workflows
      - uses: ./.github/actions/ci-env
      - uses: actions/checkout@v4
      - name: Setup CI
        uses: ./.github/actions/setup
        with:
          pull_token: ${{ secrets.REPO_TOKEN }}
      - name: Run cargo test on wp1 except the prove_sp1 recursion test
        run: |
          cargo nextest run --cargo-profile dev-ci --profile ci -E 'all() - test(test_prove_sp1)'
      - name: Run cargo test with no default features
        run: |
          cargo nextest run -p wp1-core --cargo-profile dev-ci --profile ci --no-default-features --features debug -- cpu::trace::tests::generate_trace
      - name: check examples compile
        run: |
          for i in $(find ./ -maxdepth 1 -mindepth 1 -type d); do
            cd "$i/script"
            cargo check
            cd ../../
          done
        working-directory: ${{ github.workspace }}/examples
      - name: Set env
        if: failure()
        run: |
          echo "WORKFLOW_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" | tee -a $GITHUB_ENV
      - name: Open an issue on failure
        if: failure()
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_COMMIT: ${{ github.sha }}
          WORKFLOW_URL: ${{ env.WORKFLOW_URL }}
        with:
          filename: .github/M1_MAC_FAILURE.md
          update_existing: true

  check-aptos-lc-compiles:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: lurk-lab/ci-workflows
      - uses: ./.github/actions/ci-env
      - uses: ./.github/actions/install-deps
        with:
          packages: "pkg-config libudev-dev"
      - name: Set env
        run: |
          echo "DOWNSTREAM_REPO=$(echo "wormhole-foundation/example-zk-light-clients-internal" | awk -F'/' '{ print $2 }')" | tee -a $GITHUB_ENV
          echo "UPSTREAM_REPO=$(echo "wormhole-foundation/wp1" | awk -F'/' '{ print $2 }')" | tee -a $GITHUB_ENV
      - uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/${{ env.UPSTREAM_REPO }}
          submodules: recursive
      - name: Setup CI
        uses: ./wp1/.github/actions/setup
        with:
          pull_token: ${{ secrets.REPO_TOKEN }}
          perf: false
      - uses: actions/checkout@v4
        with:
          repository: "wormhole-foundation/example-zk-light-clients-internal"
          path: ${{ github.workspace }}/${{ env.DOWNSTREAM_REPO }}
          token: ${{ secrets.REPO_TOKEN }}
          submodules: recursive
      - name: Patch Cargo.toml
        working-directory: ${{ github.workspace }}/${{ env.DOWNSTREAM_REPO }}/aptos
        run: |
          # Get each workspace package and relative path of the upstream crate, storing them in a map of former to latter
          URL=ssh://git@github.com/${{ github.repository }}

          # Assumes at least one dependency in the current workspace is used by the downstream crate
          printf "\n[patch.'$URL']\n" | tee -a Cargo.toml

          # Get a list of all upstream dependencies used by the downstream crate workspace
          # This is done by checking for each instance of `git = <upstream_url>` in any of the downstream `Cargo.toml` files
          DEPENDENCIES=$(grep -rsh "git = \"$URL\"" --include="Cargo.toml" .)

          # Extract the dependency names and check for package renames, removing duplicates
          DEP_NAMES=$(echo "$DEPENDENCIES" | awk '/package =/{for (i=1; i<=NF; i++) if ($i == "package") {name=$(i+2); print substr(name, 2, length(name)-2);} found=1} !/package =/{print $1}' | sort -u)

          shopt -s nullglob
          # Collect the `(package, path)` pairs for most subcrates in the upstream directory, regardless of whether it's a workspace member
          SUBCRATES=$(find ../../${{ env.UPSTREAM_REPO }} \( -type d \( -name target -o -name examples -o -name tests -o -name cli \) -prune \) -o -name Cargo.toml -exec grep -A1 --no-group-separator -e  "\[package\]" {} +)
          SUBCRATES=$(echo "$SUBCRATES" | sed -n 'n;p' | awk -F '-name = "|"' '{split($1, parts, "/"); path=""; for(i=1; i<=length(parts)-1; i++) {path = path parts[i] "/"}; print $2, path}')
          shopt -u nullglob

          # Store the subcrates in associative array for retrieval when patching `Cargo.toml`
          declare -A subcrates
          while IFS= read -r line; do
              pair=($line)
              subcrates[${pair[0]}]=${pair[1]}
          done <<< "$SUBCRATES"

          # Write Git patches for each dependency used downstream
          for crate in $DEP_NAMES; do
            crate_path="${subcrates[$crate]}"
            echo "$crate = { path = \"$crate_path\" }" | tee -a Cargo.toml
          done
      - name: Check downstream types don't break spectacularly
        working-directory: ${{ github.workspace }}/${{ env.DOWNSTREAM_REPO }}
        run: cargo check --workspace --tests --benches --examples
